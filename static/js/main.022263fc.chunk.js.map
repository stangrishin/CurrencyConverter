{"version":3,"sources":["redux/types/currency.js","redux/actions/currency.js","Components/Button/index.jsx","Components/PieceOfExchange/index.jsx","App.js","redux/initState.js","redux/reducers/currencyReducer.js","redux/store.js","index.js"],"names":["CHANGE_INIT_VALUE","CHANGE_DEST_VALUE","CHANGE_INIT_CURR","CHANGE_DEST_CURR","CHANGE_RATE","change_init_curr","newInitCurr","type","TYPES","payload","change_dest_curr","newDestCurr","Button","initCurr","useSelector","state","destCurr","dispatch","useDispatch","IconButton","onClick","PieceOfExchange","initOrDest","value","curr","dependencies","allTheCurrencies","TextField","name","variant","placeholder","Math","floor","onChange","event","newDestValue","newInitValue","target","Select","map","currency","MenuItem","App","useEffect","getState","a","fetch","response","json","rates","Object","keys","Grid","container","spacing","direction","alignItems","justify","style","minHeight","item","xs","Container","maxWidth","initState","rate","initValue","destValue","currencyReducer","action","newRate","allCurrencies","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAAaA,EAAoB,oBACpBC,EAAoB,oBACpBC,EAAmB,mBACnBC,EAAmB,mBACnBC,EAAc,cCQdC,EAAmB,SAACC,GAAD,MAAgB,CAC9CC,KAAMC,EACNC,QAASH,IAGEI,EAAmB,SAACC,GAAD,MAAgB,CAC9CJ,KAAMC,EACNC,QAASE,ICOIC,MAjBf,WACE,IAAMC,EAAWC,aAAY,SAACC,GAAD,OAAWA,EAAMF,YACxCG,EAAWF,aAAY,SAACC,GAAD,OAAWA,EAAMC,YACxCC,EAAWC,cAOjB,OACE,eAACC,EAAA,EAAD,CAAYC,QALe,WAC3BH,EAASZ,EAAiBW,IAC1BC,EAASP,EAAiBG,KAG1B,UACE,cAAC,IAAD,IADF,yB,2BC0CWQ,MApDf,YAA0C,IAAfC,EAAc,EAAdA,WACnBL,EAAWC,cACXK,EAAQT,aAAY,SAACC,GAAD,OAAWA,EAAM,GAAD,OAAIO,EAAJ,aACpCE,EAAOV,aAAY,SAACC,GAAD,OAAWA,EAAM,GAAD,OAAIO,EAAJ,YACnCG,EAAeX,aAAY,SAACC,GAAD,OAAWA,EAAMW,oBAoBlD,OACE,gCACE,cAACC,EAAA,EAAD,CACEC,KAAI,UAAKN,EAAL,cACJO,QAAQ,WACRtB,KAAK,SACLuB,YAAY,aAEZP,MAAiB,KAAVA,EAAe,GAAKQ,KAAKC,MAAc,IAART,GAAgB,IACtDU,SA1BoB,SAACC,GFVI,IAACC,EALAC,EEgBJ,mBAAtBF,EAAMG,OAAOT,KACfX,GFjB4BmB,EEiBDF,EAAMG,OAAOd,MFjBI,CAChDhB,KAAMC,EACNC,QAAS2B,KEiBLnB,GFd4BkB,EEcDD,EAAMG,OAAOd,MFdI,CAChDhB,KAAMC,EACNC,QAAS0B,QEoCL,cAACG,EAAA,EAAD,CACEV,KAAI,UAAKN,EAAL,aACJO,QAAQ,WACRN,MAAOC,EACPS,SAvBmB,SAACC,GACE,kBAAtBA,EAAMG,OAAOT,KACfX,EAASZ,EAAiB6B,EAAMG,OAAOd,QAEvCN,EAASP,EAAiBwB,EAAMG,OAAOd,SAevC,SAMGE,EAAac,KAAI,SAChBC,GADgB,OAGhB,cAACC,EAAA,EAAD,CAAyBlB,MAAOiB,EAAhC,SACGA,GADYA,YCfVE,MA/Bf,WACE,IAAMzB,EAAWC,cACXL,EAAWC,aAAY,SAACC,GAAD,OAAWA,EAAMF,YACxCG,EAAWF,aAAY,SAACC,GAAD,OAAWA,EAAMC,YAM9C,OAJA2B,qBAAU,WACR1B,EHQ2B,uCAAM,WAAOA,EAAU2B,GAAjB,uBAAAC,EAAA,+DACND,IAAtB/B,EAD4B,EAC5BA,SAAUG,EADkB,EAClBA,SADkB,SAEZ8B,MAAM,+CAAD,OAAgDjC,IAFzC,cAE7BkC,EAF6B,gBAGfA,EAASC,OAHM,OAG7BC,EAH6B,OAKnChC,EAAS,CAACV,KAAKC,EAAkBC,QAAQ,CAACwC,EAAMA,MAAMjC,GAAUkC,OAAOC,KAAKF,EAAMA,UAL/C,2CAAN,2DGP1B,CAACpC,EAAUG,IAGZ,cAACoC,EAAA,EAAD,CACEC,WAAS,EACTC,QAAS,EACTC,UAAU,SACVC,WAAW,SACXC,QAAQ,SACRC,MAAO,CAAEC,UAAW,SANtB,SAQE,cAACP,EAAA,EAAD,CAAMQ,MAAI,EAACC,GAAI,EAAf,SACE,eAACC,EAAA,EAAD,CAAWC,SAAS,KAApB,UACE,oBAAIL,MAAO,CAAE,aAAc,UAA3B,mCACA,oBAAIA,MAAO,CAAE,aAAc,UAA3B,gCACA,cAAC,EAAD,CAAiBpC,WAAY,SAC7B,cAAC,EAAD,IACA,cAAC,EAAD,CAAiBA,WAAY,iB,gBCvBxB0C,EATG,CAChBnD,SAAU,MACVG,SAAU,MACViD,KAAM,GACNC,UAAW,EACXC,UAAW,EACXzC,iBAAkB,CAAC,MAAO,MAAO,MAAO,Q,gBCuC3B0C,MA3Cf,WAA8C,IAArBrD,EAAoB,uDAAZ,GAAIsD,EAAQ,uCAC3C,OAAQA,EAAO9D,MAEb,KAAKC,EACH,OAAO,2BACFO,GADL,IAEEmD,UAAWG,EAAO5D,QAClB0D,UAAWE,EAAO5D,QAAUM,EAAMkD,OAGtC,KAAKzD,EACH,OAAO,2BACFO,GADL,IAEEoD,UAAWE,EAAO5D,QAClByD,UAAWG,EAAO5D,QAAUM,EAAMkD,OAGtC,KAAKzD,EACH,OAAO,2BACFO,GADL,IAEEF,SAAUwD,EAAO5D,UAGrB,KAAKD,EACH,OAAO,2BACFO,GADL,IAEEC,SAAUqD,EAAO5D,UAGrB,KAAKD,EAAL,kBACmC6D,EAAO5D,QAD1C,GACS6D,EADT,KACkBC,EADlB,KAEE,OAAO,2BACFxD,GADL,IAEEkD,KAAMK,EACNH,UAAWpD,EAAMmD,UAAYI,EAC7B5C,iBAAkB6C,IAGtB,QACE,OAAOxD,I,QC7BEyD,EANDC,sBACZL,EACAJ,EACAU,8BAAoBC,0BAAgBC,OCFtCC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJQ,SAASC,eAAe,W","file":"static/js/main.022263fc.chunk.js","sourcesContent":["export const CHANGE_INIT_VALUE = 'CHANGE_INIT_VALUE';\nexport const CHANGE_DEST_VALUE = 'CHANGE_DEST_VALUE';\nexport const CHANGE_INIT_CURR = 'CHANGE_INIT_CURR';\nexport const CHANGE_DEST_CURR = 'CHANGE_DEST_CURR';\nexport const CHANGE_RATE = 'CHANGE_RATE';\n","import * as TYPES from '../types/currency'\n//изменение количества исходной валюты\nexport const change_init_value = (newInitValue)=>({\n  type: TYPES.CHANGE_INIT_VALUE,\n  payload: newInitValue\n})\n//изменение количества конечной валюты\nexport const change_dest_value = (newDestValue)=>({\n  type: TYPES.CHANGE_DEST_VALUE,\n  payload: newDestValue\n})\n//изменение исходной валюты\nexport const change_init_curr = (newInitCurr)=>({\n  type: TYPES.CHANGE_INIT_CURR,\n  payload: newInitCurr\n})\n//изменение конечной валюты\nexport const change_dest_curr = (newDestCurr)=>({\n  type: TYPES.CHANGE_DEST_CURR,\n  payload: newDestCurr\n})\n//отправляем асинхронный запрос на сторонний сервер с целью получения курса и списка валют\nexport const get_rates_thunk = () => async (dispatch, getState) => {\n  const {initCurr, destCurr} = getState()\n  const response = await fetch(`https://api.exchangeratesapi.io/latest?base=${initCurr}`)\n  const rates = await response.json()\n  //поскольку ответ приходит как объект в объекте, то мы будем диспачить и в качестве полезной нагрузки будем передавать массив, где есть сам курс между исходной и конечной валютой, а также список валют. В редьюсере мы деструктурируем этот массив.\n  dispatch({type:TYPES.CHANGE_RATE,payload:[rates.rates[destCurr],Object.keys(rates.rates)]})\n}\n","import { IconButton } from '@material-ui/core';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  change_init_curr,\n  change_dest_curr,\n} from '../../redux/actions/currency';\n\nfunction Button() {\n  const initCurr = useSelector((state) => state.initCurr);\n  const destCurr = useSelector((state) => state.destCurr);\n  const dispatch = useDispatch();\n  \n  //функция, которая будет менять валюты местами\n  const handleSwitchCurrency = () => {\n    dispatch(change_init_curr(destCurr));\n    dispatch(change_dest_curr(initCurr));\n  };\n  return (\n    <IconButton onClick={handleSwitchCurrency}>\n      <AutorenewIcon /> Switch Currencies\n    </IconButton>\n  );\n}\n\nexport default Button;\n","import React from 'react';\nimport { MenuItem, Select, TextField } from '@material-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  change_init_curr,\n  change_dest_curr,\n  change_init_value,\n  change_dest_value,\n} from '../../redux/actions/currency';\n\nfunction PieceOfExchange({ initOrDest }) {\n  const dispatch = useDispatch();\n  const value = useSelector((state) => state[`${initOrDest}Value`]);\n  const curr = useSelector((state) => state[`${initOrDest}Curr`]);\n  const dependencies = useSelector((state) => state.allTheCurrencies);\n\n//функция, которая будет следить за изменением количества исх или конечного значения, в зависимости от того, от кого придет event\n  const handleValueChange = (event) => {\n    if (event.target.name === 'initValueInput') {\n      dispatch(change_init_value(event.target.value));\n    } else {\n      dispatch(change_dest_value(event.target.value));\n    }\n  };\n\n  //функция, которая будет следить за изменением самой исх или конечной валюты, в зависимости от того, от кого придет event\n  const handleCurrChange = (event) => {\n    if (event.target.name === 'initCurrInput') {\n      dispatch(change_init_curr(event.target.value));\n    } else {\n      dispatch(change_dest_curr(event.target.value));\n    }\n  };\n\n  return (\n    <div>\n      <TextField\n        name={`${initOrDest}ValueInput`}\n        variant='outlined'\n        type='number'\n        placeholder='Value here'\n        //Значение в поле должно быть ограничено 3мя знаками после запятой, но при этом поле можно очистить полностью\n        value={value === '' ? '' : Math.floor(value * 1000) / 1000}\n        onChange={handleValueChange}\n      />\n      <Select\n        name={`${initOrDest}CurrInput`} //нужно уникальное для поля имя, чтобы мы различали затем, какой диспатч запускать\n        variant='outlined'\n        value={curr}\n        onChange={handleCurrChange}\n      >\n        {dependencies.map((\n          currency //список доступных валют для выбора\n        ) => (\n          <MenuItem key={currency} value={currency}>\n            {currency}\n          </MenuItem>\n        ))}\n      </Select>\n    </div>\n  );\n}\nexport default PieceOfExchange;\n","import { useEffect } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Button from './Components/Button';\nimport PieceOfExchange from './Components/PieceOfExchange';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { get_rates_thunk } from './redux/actions/currency';\n\nfunction App() {\n  const dispatch = useDispatch();\n  const initCurr = useSelector((state) => state.initCurr);\n  const destCurr = useSelector((state) => state.destCurr);\n\n  useEffect(() => {\n    dispatch(get_rates_thunk());\n  }, [initCurr, destCurr]); //при каждом изменении изначальной валюты или конечной, а также после того, как компонент замаунтится, отправим запрос на получение курса и списка валют\n\n  return (\n    <Grid\n      container\n      spacing={0}\n      direction='column'\n      alignItems='center'\n      justify='center'\n      style={{ minHeight: '100vh' }}\n    >\n      <Grid item xs={6}>\n        <Container maxWidth='sm'>\n          <h5 style={{ 'text-align': 'center' }}>THE DESIGN IS AWESOME</h5>\n          <h2 style={{ 'text-align': 'center' }}>CURRENCY CONVERTER</h2>\n          <PieceOfExchange initOrDest={'init'} />\n          <Button />\n          <PieceOfExchange initOrDest={'dest'} />\n        </Container>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","const initState = {\n  initCurr: 'USD',//самая популярная пара для россиян USD-RUB поэтому мы ее оставляем по умолчанию\n  destCurr: 'RUB',\n  rate: 10,//не важно какое значение, когда компонент App смонтируется, он все равно сразу поменяется на полученный со стороннего апи\n  initValue: 1,\n  destValue: 1,\n  allTheCurrencies: ['USD', 'EUR', 'NOK', 'RUB'],\n};\n\nexport default initState;\n","import * as TYPES from '../types/currency';\n\nfunction currencyReducer(state = {}, action) {\n  switch (action.type) {\n    //изменение количества исх валюты\n    case TYPES.CHANGE_INIT_VALUE:\n      return {\n        ...state,\n        initValue: action.payload,\n        destValue: action.payload * state.rate, //кол-во конечной валюты сразу должно пересчитываться\n      };\n    //изменение количества кон валюты\n    case TYPES.CHANGE_DEST_VALUE:\n      return {\n        ...state,\n        destValue: action.payload,\n        initValue: action.payload / state.rate, //кол-во исх валюты должно сразу пересчитываться\n      };\n    //изменение исх валюты на другую\n    case TYPES.CHANGE_INIT_CURR:\n      return {\n        ...state,\n        initCurr: action.payload,\n      };\n    //изменение конечной валюты на другую\n    case TYPES.CHANGE_DEST_CURR:\n      return {\n        ...state,\n        destCurr: action.payload,\n      };\n    //изменение курса - происходит когда либо меняются местами валюты, либо меняется одна из валют\n    case TYPES.CHANGE_RATE:\n      const [newRate, allCurrencies] = action.payload;//достаем курс и список валют\n      return {\n        ...state,\n        rate: newRate,\n        destValue: state.initValue * newRate,//нам нужно пересчитать только конечное количество, потому что исх количество не меняется (так задумано)\n        allTheCurrencies: allCurrencies,//поскольку для некоторых валют может не быть кросс-курсов, то надо каждый раз получать и сохранять в стор возможные валюты\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default currencyReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport initState from './initState';\nimport currencyReducer from './reducers/currencyReducer';\nimport thunk from 'redux-thunk';\n//создаем стор, где в качестве мидлвера ставим Thunk\nconst store = createStore(\n  currencyReducer,\n  initState,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}