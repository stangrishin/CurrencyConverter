{"version":3,"sources":["Components/Button/index.jsx","redux/types/currency.js","redux/actions/currency.js","Components/PieceOfExchange/index.jsx","Components/CurrencySelect/index.js","App.js","redux/initState.js","redux/reducers/currencyReducer.js","redux/store.js","index.js"],"names":["Button","switchcurrs","IconButton","onClick","CHANGE_INIT_VALUE","CHANGE_DEST_VALUE","CHANGE_INIT_CURR","CHANGE_DEST_CURR","CHANGE_RATE","SWITCH_CURRS","get_rates_thunk","dispatch","getState","a","initCurr","destCurr","fetch","response","json","rates","type","TYPES","payload","Object","keys","PieceOfExchange","initOrDest","useDispatch","value","useSelector","state","TextField","name","variant","placeholder","Math","floor","onChange","event","newDestValue","newInitValue","target","CurrencySelect","curr","dependencies","allTheCurrencies","Select","newDestCurr","newInitCurr","map","currency","MenuItem","App","useEffect","Grid","container","spacing","direction","alignItems","justify","style","minHeight","item","xs","Container","maxWidth","textAlign","initState","rate","initValue","destValue","currencyReducer","action","newRate","allCurrencies","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.82817006.chunk.js","sourcesContent":["import { IconButton } from '@material-ui/core';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport React from 'react';\n\nfunction Button({switchcurrs}) {\n\n  return (\n    <IconButton onClick={switchcurrs}>\n      <AutorenewIcon /> Switch Currencies\n    </IconButton>\n  );\n}\n\nexport default Button;\n","export const CHANGE_INIT_VALUE = 'CHANGE_INIT_VALUE';\nexport const CHANGE_DEST_VALUE = 'CHANGE_DEST_VALUE';\nexport const CHANGE_INIT_CURR = 'CHANGE_INIT_CURR';\nexport const CHANGE_DEST_CURR = 'CHANGE_DEST_CURR';\nexport const CHANGE_RATE = 'CHANGE_RATE';\nexport const SWITCH_CURRS = 'SWITCH_CURRS';\n","import * as TYPES from '../types/currency'\n//поменять валюты местами\nexport const switch_currencies = ()=>({\n  type: TYPES.SWITCH_CURRS,\n})\n//изменение количества исходной валюты\nexport const change_init_value = (newInitValue)=>({\n  type: TYPES.CHANGE_INIT_VALUE,\n  payload: newInitValue\n})\n//изменение количества конечной валюты\nexport const change_dest_value = (newDestValue)=>({\n  type: TYPES.CHANGE_DEST_VALUE,\n  payload: newDestValue\n})\n//изменение исходной валюты\nexport const change_init_curr = (newInitCurr)=>({\n  type: TYPES.CHANGE_INIT_CURR,\n  payload: newInitCurr\n})\n//изменение конечной валюты\nexport const change_dest_curr = (newDestCurr)=>({\n  type: TYPES.CHANGE_DEST_CURR,\n  payload: newDestCurr\n})\n//отправляем асинхронный запрос на сторонний сервер с целью получения курса и списка валют\nexport const get_rates_thunk = () => async (dispatch, getState) => {\n  const {initCurr, destCurr} = getState()\n  const response = await fetch(`https://api.exchangeratesapi.io/latest?base=${initCurr}`)\n  const rates = await response.json()\n  //поскольку ответ приходит как объект в объекте, то мы будем диспачить и в качестве полезной нагрузки будем передавать массив, где есть сам курс между исходной и конечной валютой, а также список валют. В редьюсере мы деструктурируем этот массив.\n  dispatch({type:TYPES.CHANGE_RATE,payload:[rates.rates[destCurr],Object.keys(rates.rates)]})\n}\n","import React from 'react';\nimport { TextField } from '@material-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  change_init_value,\n  change_dest_value,\n} from '../../redux/actions/currency';\n\nfunction PieceOfExchange({ initOrDest }) {\n  const dispatch = useDispatch();\n  const value = useSelector((state) => state[`${initOrDest}Value`]);\n\n  //функция, которая будет следить за изменением количества исх или конечного значения, в зависимости от того, от кого придет event\n  const handleValueChange = (event) => {\n    if (event.target.name === 'initValueInput') {\n      dispatch(change_init_value(event.target.value));\n    } else {\n      dispatch(change_dest_value(event.target.value));\n    }\n  };\n\n  return (\n    <TextField\n      name={`${initOrDest}ValueInput`}\n      variant='outlined'\n      type='number'\n      placeholder='Value here'\n      //Значение в поле должно быть ограничено 3мя знаками после запятой, но при этом поле можно очистить полностью\n      value={value === '' ? '' : Math.floor(value * 1000) / 1000}\n      onChange={handleValueChange}\n    />\n  );\n}\nexport default PieceOfExchange;\n","import React from 'react';\nimport { MenuItem, Select } from '@material-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  change_init_curr,\n  change_dest_curr,\n  get_rates_thunk\n} from '../../redux/actions/currency';\n\nfunction CurrencySelect({ initOrDest }) {\n  const dispatch = useDispatch();\n  const curr = useSelector((state) => state[`${initOrDest}Curr`]);\n  const dependencies = useSelector((state) => state.allTheCurrencies);\n\n\n  //функция, которая будет следить за изменением самой исх или конечной валюты, в зависимости от того, от кого придет event, а затем необходимо получить новые курсы\n  const handleCurrChange = (event) => {\n    if (event.target.name === 'initCurrInput') {\n      dispatch(change_init_curr(event.target.value));\n    } else {\n      dispatch(change_dest_curr(event.target.value));\n    }\n    dispatch(get_rates_thunk())\n  };\n\n  return (\n    <Select\n      name={`${initOrDest}CurrInput`} //нужно уникальное для поля имя, чтобы мы различали затем, какой диспатч запускать\n      variant='outlined'\n      value={curr}\n      onChange={handleCurrChange}\n    >\n      {dependencies.map((\n        currency //список доступных валют для выбора\n      ) => (\n        <MenuItem key={currency} value={currency}>\n          {currency}\n        </MenuItem>\n      ))}\n    </Select>\n  );\n}\n\nexport default CurrencySelect;\n","import { useEffect } from 'react';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\nimport Button from './Components/Button';\nimport PieceOfExchange from './Components/PieceOfExchange';\nimport { useDispatch } from 'react-redux';\nimport { get_rates_thunk, switch_currencies } from './redux/actions/currency';\nimport CurrencySelect from './Components/CurrencySelect';\n\nfunction App() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(get_rates_thunk());\n  }, []); //после того, как компонент замаунтится, отправим запрос на получение курса и списка валют\n\n  //функция, которая будет менять валюты местами и запрашивать новый курс\n  const handleSwitchCurrency = () => {\n    dispatch(switch_currencies());\n    dispatch(get_rates_thunk());\n  };\n  return (\n    <Grid\n      container\n      spacing={0}\n      direction='column'\n      alignItems='center'\n      justify='center'\n      style={{ minHeight: '100vh' }}\n    >\n      <Grid item xs={6}>\n        <Container maxWidth='sm'>\n          <h5 style={{ textAlign: 'center' }}>THE DESIGN IS AWESOME</h5>\n          <h2 style={{ textAlign: 'center' }}>CURRENCY CONVERTER</h2>\n          <div>\n            <PieceOfExchange initOrDest={'init'} />\n            <CurrencySelect initOrDest={'init'} />\n          </div>\n            <Button switchcurrs={handleSwitchCurrency}/>\n          <div>\n            <PieceOfExchange initOrDest={'dest'} />\n            <CurrencySelect initOrDest={'dest'} />\n          </div>\n        </Container>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default App;\n","const initState = {\n  initCurr: 'USD',//самая популярная пара для россиян USD-RUB поэтому мы ее оставляем по умолчанию\n  destCurr: 'RUB',\n  rate: 10,//не важно какое значение, когда компонент App смонтируется, он все равно сразу поменяется на полученный со стороннего апи\n  initValue: 1,\n  destValue: 1,\n  allTheCurrencies: ['USD', 'EUR', 'NOK', 'RUB'],\n};\n\nexport default initState;\n","import * as TYPES from '../types/currency';\n\nfunction currencyReducer(state = {}, action) {\n  switch (action.type) {\n    //поменять валюты местами\n    case TYPES.SWITCH_CURRS:\n      return {\n        ...state,\n        initCurr: state.destCurr,\n        destCurr: state.initCurr, //кол-во конечной валюты сразу должно пересчитываться\n      };\n    //изменение количества исх валюты\n    case TYPES.CHANGE_INIT_VALUE:\n      return {\n        ...state,\n        initValue: action.payload,\n        destValue: action.payload * state.rate, //кол-во конечной валюты сразу должно пересчитываться\n      };\n    //изменение количества кон валюты\n    case TYPES.CHANGE_DEST_VALUE:\n      return {\n        ...state,\n        destValue: action.payload,\n        initValue: action.payload / state.rate, //кол-во исх валюты должно сразу пересчитываться\n      };\n    //изменение исх валюты на другую\n    case TYPES.CHANGE_INIT_CURR:\n      return {\n        ...state,\n        initCurr: action.payload,\n      };\n    //изменение конечной валюты на другую\n    case TYPES.CHANGE_DEST_CURR:\n      return {\n        ...state,\n        destCurr: action.payload,\n      };\n    //изменение курса - происходит когда либо меняются местами валюты, либо меняется одна из валют\n    case TYPES.CHANGE_RATE:\n      const [newRate, allCurrencies] = action.payload;//достаем курс и список валют\n      return {\n        ...state,\n        rate: newRate,\n        destValue: state.initValue * newRate,//нам нужно пересчитать только конечное количество, потому что исх количество не меняется (так задумано)\n        allTheCurrencies: allCurrencies,//поскольку для некоторых валют может не быть кросс-курсов, то надо каждый раз получать и сохранять в стор возможные валюты\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport default currencyReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport initState from './initState';\nimport currencyReducer from './reducers/currencyReducer';\nimport thunk from 'redux-thunk';\n//создаем стор, где в качестве мидлвера ставим Thunk\nconst store = createStore(\n  currencyReducer,\n  initState,\n  composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}